<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Jordan's Data Science Secrets - Jordan Milne</title><link href="https://jordan-Milne.github.io/Blog/" rel="alternate"></link><link href="https://jordan-Milne.github.io/Blog/feeds/jordan-milne.atom.xml" rel="self"></link><id>https://jordan-Milne.github.io/Blog/</id><updated>2020-03-15T11:35:00-04:00</updated><entry><title>Gradient Bossting: Under The Hood</title><link href="https://jordan-Milne.github.io/Blog/Gradient%20Boosting.html" rel="alternate"></link><published>2020-03-15T11:35:00-04:00</published><updated>2020-03-15T11:35:00-04:00</updated><author><name>Jordan Milne</name></author><id>tag:jordan-milne.github.io,2020-03-15:/Blog/Gradient Boosting.html</id><summary type="html">&lt;h1&gt;How Gradient Boosting Works&lt;/h1&gt;
&lt;p&gt;Gradient Boosting is an extremely powerful machine learning algorithm that can handle both regression and classification problems. Gradient Boosting is built of the backs of multiple decision trees, so it is neccearcy to understand decision trees to understand gradient boosting.&lt;/p&gt;
&lt;h2&gt;Decision Trees&lt;/h2&gt;
&lt;p&gt;Simply put, a decision …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;How Gradient Boosting Works&lt;/h1&gt;
&lt;p&gt;Gradient Boosting is an extremely powerful machine learning algorithm that can handle both regression and classification problems. Gradient Boosting is built of the backs of multiple decision trees, so it is neccearcy to understand decision trees to understand gradient boosting.&lt;/p&gt;
&lt;h2&gt;Decision Trees&lt;/h2&gt;
&lt;p&gt;Simply put, a decision tree asks questions, and then classifies the data based on the answers. The node very top of a decision tree is called the &lt;strong&gt;root node&lt;/strong&gt;, the nodes at the very bottom are called &lt;strong&gt;leaf nodes&lt;/strong&gt;, and the nodes in between are called &lt;strong&gt;internal nodes&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="test" src="https://miro.medium.com/max/1700/0*0dN6d8THyImxwPeD.png"&gt;
&lt;div align="center"&gt;Figure 1&lt;/div&gt;&lt;/p&gt;
&lt;h3&gt;How Decision Trees Work&lt;/h3&gt;
&lt;p&gt;If we want to classify if it is a good day to go golfing (the dataset below), how do we decide what the root node should be? First we check how well each column seperates the data based on the target. In the imaginary dataset below, we look at all 303 days and see how outlook seperates 'Play Golf'. The most common method of ranking which column seperates the data the best is by using the Gini impurity. &lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;&lt;a href="https://miro.medium.com/max/415/0*asbVp_8lwEsbfpOv.png"&gt;&lt;img src="https://miro.medium.com/max/415/0*asbVp_8lwEsbfpOv.png" width="50"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;The Gini Impurity&lt;/h3&gt;
&lt;p&gt;&lt;img src="https://miro.medium.com/max/415/0*asbVp_8lwEsbfpOv.png" alt="test" width="100"&gt;&lt;/p&gt;
&lt;div align="center"&gt;Figure 2&lt;/div&gt;

&lt;p&gt;This can be translated as Gini Impurity = 1 - (probability of yes)&lt;sup&gt;2&lt;/sup&gt; - (probability of no)&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;For the leaf node on the &lt;strong&gt;left&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://latex.codecogs.com/gif.latex?Gini&amp;space;Impurity&amp;space;=&amp;space;1&amp;space;-&amp;space;\left&amp;space;(\frac{105}{105&amp;plus;39}&amp;space;\right&amp;space;)^{2}&amp;space;-&amp;space;\left&amp;space;(\frac{39}{105&amp;plus;39}&amp;space;\right&amp;space;)^{2}&amp;space;=&amp;space;0.395" title="Gini Impurity = 1 - \left (\frac{105}{105+39} \right )^{2} - \left (\frac{39}{105+39} \right )^{2} = 0.395" /&gt;&lt;/p&gt;
&lt;p&gt;For the leaf node on the &lt;strong&gt;right&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://latex.codecogs.com/gif.latex?Gini&amp;space;Impurity&amp;space;=&amp;space;1&amp;space;-&amp;space;\left&amp;space;(\frac{34}{125&amp;plus;34}&amp;space;\right&amp;space;)^{2}&amp;space;-&amp;space;\left&amp;space;(\frac{125}{125&amp;plus;34}&amp;space;\right&amp;space;)^{2}&amp;space;=&amp;space;0.336" title="Gini Impurity = 1 - \left (\frac{34}{125+34} \right )^{2} - \left (\frac{125}{125+34} \right )^{2} = 0.336" /&gt;&lt;/p&gt;
&lt;p&gt;Now, we take the weighted average of the leaf node impurities based on amount of datapoints:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://latex.codecogs.com/gif.latex?\left&amp;space;(\frac{144}{144&amp;plus;159}&amp;space;\right&amp;space;)0.395&amp;space;-&amp;space;\left&amp;space;(\frac{159}{144&amp;plus;159}&amp;space;\right&amp;space;)0.336&amp;space;=&amp;space;0.364" title="\left (\frac{144}{144+159} \right )0.395 - \left (\frac{159}{144+159} \right )0.336 = 0.364" /&gt;&lt;/p&gt;
&lt;p&gt;This is done for every column and the one with the &lt;strong&gt;lowest&lt;/strong&gt; impurity will be chosen as the root node! This same idea is used to select the next nodes, and the next, etc.&lt;/p&gt;
&lt;h2&gt;Gradient Boost (Regression)&lt;/h2&gt;
&lt;p&gt;This example below on predicting IQ using the the dataset in figure 3 will be used to explain how gradient boosting works for regression.&lt;/p&gt;
&lt;p&gt;&lt;img src="images/gb2.png" alt="drawing" width="300"/&gt;&lt;/p&gt;
&lt;div align="center"&gt;Figure 3&lt;/div&gt;

&lt;h3&gt;Step 1: Gradient Boost first takes the average value of the target column as the initial prediction.&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Details:&lt;/strong&gt; Gradient Boost uses a loss function, &lt;em&gt;L(y&lt;sub&gt;i&lt;/sub&gt;,F(x))&lt;/em&gt; which is equal to 0.5(Observed - Predicted)&lt;sup&gt;2&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Gradient Boost uses the loss function in the following formula to make the initial prediction for each data point:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://latex.codecogs.com/gif.latex?F_{0}(x)&amp;space;=&amp;space;argmin\sum_{i=1}^{n}L(y_{i},y)" title="F_{0}(x) = argmin\sum_{i=1}^{n}L(y_{i},y)" /&gt;&lt;/p&gt;
&lt;p&gt;In english this means sum up the loss function of the rows and find the minimum value. This can be done by taking the derivative of each term with respect to the predicted (y&lt;sub&gt;i&lt;/sub&gt;). &lt;/p&gt;
&lt;p&gt;Working through the first row (using the chain rule) looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src="https://latex.codecogs.com/gif.latex?\frac{\mathrm{d}&amp;space;}{\mathrm{d}Predicted}(\frac{1}{2}(88-Predicted))&amp;space;=&amp;space;-(88-Predicted)" title="\frac{\mathrm{d} }{\mathrm{d}Predicted}(\frac{1}{2}(88-Predicted)) = -(88-Predicted)" /&gt;&lt;/p&gt;
&lt;p&gt;Now doing this for all 3 rows and setting the sum of the derivates to 0 will allow us to find the minimum value&lt;/p&gt;
&lt;p&gt;-(88-Predicted))+(-(76-Predicted)) + (-(56-Predicted)) = 0&lt;/p&gt;
&lt;p&gt;Predicted = &lt;strong&gt;73.3&lt;/strong&gt;&lt;/p&gt;
&lt;h3&gt;Step 2: Gradient Boost  subtracts the average (intial prediction) from each row's target and stores in the 'Pseudo Residual Columns'&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Details:&lt;/strong&gt; Gradient Boost uses this function to calculate the pseudo residuals: &lt;/p&gt;
&lt;p&gt;&lt;img src="https://latex.codecogs.com/gif.latex?r_{im}&amp;space;=&amp;space;-\frac{\partial&amp;space;L(y_i,F(x))}{\partial&amp;space;F(x)}" title="r_{im} = -\frac{\partial L(y_i,F(x))}{\partial F(x)}" width="30"/&gt;&lt;/p&gt;
&lt;p&gt;Applying this simple formula to all the rows gives us residuals which are stored in the Pseudo Residual column as seen above.&lt;/p&gt;
&lt;h3&gt;Step 3: Gradient Boost Builds a decision tree to predict the &lt;strong&gt;pseudo residual&lt;/strong&gt; values.&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Details:&lt;/strong&gt; Gradient Boost builds a decision tree and classifies the pseudo residuals as shown in Figure 3. The value of the leaves is calculated using the following equation: &lt;/p&gt;
&lt;p&gt;&lt;img src="https://latex.codecogs.com/gif.latex?\gamma_{jm}&amp;space;=&amp;space;argmin\sum_{n}^{i=1}L(y_i,F_m(X_i)&amp;plus;\gamma)" title="\gamma_{jm} = argmin\sum_{n}^{i=1}L(y_i,F_m(X_i)+\gamma)" /&gt;&lt;/p&gt;
&lt;p&gt;This seemingly complex equation is actually pretty simple and similar to the equation from Step 1. The equation quickly reduces down to just being the average of the values in each leaf. So the value of the left leaf in Figure 4 is (14.7 + 2.7)/2 = 8.7 and just -17.3 for the right leaf.&lt;/p&gt;
&lt;h3&gt;Step 4: Make a new prediction for each sample by updating &lt;em&gt;F&lt;sub&gt;m&lt;/sub&gt;(x)&lt;/em&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Details&lt;/strong&gt; Gradient Boost uses the following equation to make a new prediction: &lt;/p&gt;
&lt;p&gt;&lt;img src="https://latex.codecogs.com/gif.latex?F_{m}(x)&amp;space;=&amp;space;F_{m-1}(x)&amp;space;&amp;plus;&amp;space;\nu\sum_{j=1}^{j}y_iI(x\epsilon&amp;space;R_j)" title="F_{m}(x) = F_{m-1}(x) + \nu\sum_{j=1}^{j}y_iI(x\epsilon R_j)" /&gt;&lt;/p&gt;
&lt;p&gt;In english that equation translates to: The new prediction (&lt;em&gt;F&lt;sub&gt;m&lt;/sub&gt;(x)&lt;/em&gt;) is equal to the old prediction (&lt;em&gt;F&lt;sub&gt;m-1&lt;/sub&gt;(x)&lt;/em&gt;) + the learning rate (&lt;em&gt;ν&lt;/em&gt;) multiplied by the pseudo residual (&lt;em&gt;the sumation&lt;/em&gt;). The learning rate is a parameter that can be changed but is a number between 0 and 1.  The learning rate is proven to reduce variance resulting in better predictions.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Using the tree below and a learning rate of 0.1, let's make a prediction for the first row from Fig 3.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Using the equation above, we get  F&lt;sub&gt;m&lt;/sub&gt;(x) = 73.3 + 0.1(8.7)&lt;/p&gt;
&lt;p&gt;F&lt;sub&gt;m&lt;/sub&gt;(x) = 74.2&lt;/p&gt;
&lt;p&gt;Now, the actual value for the first row is actually 88 &lt;em&gt;but&lt;/em&gt; 74.2 is closer than the original prediction of 73.3&lt;/p&gt;
&lt;p&gt;&lt;img src="images/tree.jpg" alt="drawing" width="30"/&gt;
&lt;img alt="png" src="images/tree.jpg"&gt;&lt;/p&gt;
&lt;div align="center"&gt;Figure 4&lt;/div&gt;

&lt;h3&gt;Step 5: Repeat Steps 2 - 4 with updated predictions for the amount of interations specified!&lt;/h3&gt;
&lt;p&gt;When broken down into small steps, the complex equations that make up gradient boosting for regression can be easily understood.&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Understanding the Brain of the Long Short-Term Memory Network (LSTM)</title><link href="https://jordan-Milne.github.io/Blog/LSTM%20Breakdown.html" rel="alternate"></link><published>2020-02-15T11:35:00-05:00</published><updated>2020-02-15T11:35:00-05:00</updated><author><name>Jordan Milne</name></author><id>tag:jordan-milne.github.io,2020-02-15:/Blog/LSTM Breakdown.html</id><summary type="html">&lt;h2&gt;In this blog post I explain why a simple Recurrent Neural Network (RNN) is not the best choice for text generation and give an in depth review on how a LSTM network operates.&lt;/h2&gt;
&lt;h2&gt;RNN&lt;/h2&gt;
&lt;p&gt;Unlike a feedforward or sequential neural networks, the outputs of some layers in RNNs are fed …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;In this blog post I explain why a simple Recurrent Neural Network (RNN) is not the best choice for text generation and give an in depth review on how a LSTM network operates.&lt;/h2&gt;
&lt;h2&gt;RNN&lt;/h2&gt;
&lt;p&gt;Unlike a feedforward or sequential neural networks, the outputs of some layers in RNNs are fed back into the inputs of a previous layer. This addition allows for the analysis of sequential data, which is something that the traditional NN is incapable of. Also, traditional NNs are limited to a fixed-length input, whereas the RNN has no such restriction.&lt;/p&gt;
&lt;p&gt;Here is a basic image of a simple Recurrent Neural Network (RNN). Where the state of the neuron (S&lt;sub&gt;t&lt;/sub&gt;) is equal to the previous state (S&lt;sub&gt;t-1&lt;/sub&gt;) multiplied by the weight W&lt;sub&gt;hh&lt;/sub&gt; added to the current input (X&lt;sub&gt;t&lt;/sub&gt;) multiplied by the weight for that input (W&lt;sub&gt;t&lt;/sub&gt;) all passed through a &lt;code&gt;tanh&lt;/code&gt; activation. This results in a formula that looks like this: &lt;strong&gt;S&lt;sub&gt;t&lt;/sub&gt; = tanh(S&lt;sub&gt;t-1&lt;/sub&gt;W&lt;sub&gt;hh&lt;/sub&gt; + X&lt;sub&gt;t&lt;/sub&gt;W&lt;sub&gt;t&lt;/sub&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://www.researchgate.net/profile/Sachin_Talathi/publication/283761596/figure/fig1/AS:614157342752782@1523437929971/Schematic-diagram-of-a-simple-RNN-network.png" alt="Simple RNN" width="200"/&gt;&lt;/p&gt;
&lt;p&gt;Now, the problem with using a simple RNN to generate lines for a seinfled character can be easily explained. If the network is fed these three sentences: &lt;code&gt;Jerry likes Kramer.&lt;/code&gt; &lt;code&gt;Kramer hates Elaine.&lt;/code&gt; &lt;code&gt;Elaine likes Jerry.&lt;/code&gt; It would have a dictionary of the following: &lt;code&gt;Jerry, likes, hates, Kramer, Elaine, .&lt;/code&gt; The network would learn that after a name is either &lt;code&gt;likes&lt;/code&gt; or &lt;code&gt;.&lt;/code&gt; but never another name, which is good. However the network also might output something like&lt;code&gt;Jerry likes Jerry&lt;/code&gt;, &lt;code&gt;Jerry likes Elaine likes Kramer.&lt;/code&gt;, or &lt;code&gt;Jerry. Kramer. Elaine.&lt;/code&gt; which are outputs that do not make sense.&lt;/p&gt;
&lt;h2&gt;LSTM&lt;/h2&gt;
&lt;p&gt;It can be difficult to train standard RNNs to solve problems that require learning long-term temporal dependencies. This is because the gradient of the loss function decays exponentially with time (called the vanishing gradient problem). LSTM networks are a type of RNN that uses special units in addition to standard units. LSTM units include a 'memory cell' that can maintain information in memory for long periods of time. A set of gates is used to control when information enters the memory, when it's output, and when it's forgotten.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://media1.giphy.com/media/iB4PoTVka0Xnul7UaC/giphy.gif" alt="Simple RNN" width="500"/&gt;&lt;/p&gt;
&lt;p&gt;The solution to this is to add some sort of 'memory' to the network. This was done using an Long Short-Term Memory network (LSTM network). LSTM The layout of LSTM neurons can be intimadingly complex but when broken down peice by peice it is easier to wrap your head around it. In the figure below the black saure with a cross/plus in it simply represents element by element addition of vectors from two matrices of equal length. This is called a pointwise addition or an addition junction. Similarily, the black squares with an 'x', lets call a multiplication junctions, represent element by element multiplication of vectors from two matrices of equal length. &lt;/p&gt;
&lt;p&gt;Now things are going to get more complex. A sigmoid function basically just squishes numbers to have a magnitude between 0 and 1 and tanh squishes numbers to have a magnitude between  -1 and 1 . When a sigmoid function is succeeded by a multiplication junction a 'gate' is created. Gating just describes how the sigmoid function controls the output of the gate by multipling the other input by either a low value (like zero) that would not allow the input through, or a high value (like 1) that would allow the input to go through unchanged.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://cdn-images-1.medium.com/max/1000/1*QxwbOkm02adHtj01lymgJg.png" alt="lstm" width="400"/&gt;&lt;/p&gt;
&lt;p&gt;Now it is time to put the puzzle together. It is important to note there are basically two main paths in the diagram above. The Top path begins in the upper right corner and has an input of the previous cell state. This top path takes the previous cell state and modifies it with outputs from the bottom path. The bottom path begins at the bottom left corner and has inputs of "current input" (&lt;strong&gt;X&lt;sub&gt;t&lt;/sub&gt;&lt;/strong&gt;) and the "previous hidden state" (&lt;strong&gt;h&lt;sub&gt;t-1&lt;/sub&gt;&lt;/strong&gt;). The bottom path passes the &lt;code&gt;current input&lt;/code&gt; and the &lt;code&gt;previous hidden state&lt;/code&gt; through three different gates.&lt;/p&gt;
&lt;h3&gt;1. Forget Gate&lt;/h3&gt;
&lt;p&gt;This Gate decides which information shall be kept or thrown away. [&lt;strong&gt;h&lt;sub&gt;t-1&lt;/sub&gt;&lt;/strong&gt; and &lt;strong&gt;X&lt;sub&gt;t&lt;/sub&gt;&lt;/strong&gt;] are passed through the sigmoid function then passed to a multiplication junction with the previous cell state (&lt;strong&gt;C&lt;sub&gt;t-1&lt;/sub&gt;&lt;/strong&gt;) and the output is a modified &lt;strong&gt;C&lt;sub&gt;t-1&lt;/sub&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;2. Input Gate&lt;/h3&gt;
&lt;p&gt;The input gate takes [&lt;strong&gt;h&lt;sub&gt;t-1&lt;/sub&gt;&lt;/strong&gt; and &lt;strong&gt;X&lt;sub&gt;t&lt;/sub&gt;&lt;/strong&gt;]  which were passed through a sigmoid function and a tanh function in parallel to a multiplication junction. The ouput of the multiplication junction at the input gate is then passed though an addition junction with the modified &lt;strong&gt;C&lt;sub&gt;t-1&lt;/sub&gt;&lt;/strong&gt; from the forget gate - resulting in the &lt;strong&gt;current state&lt;/strong&gt; of the cell (&lt;strong&gt;C&lt;sub&gt;t&lt;/sub&gt;&lt;/strong&gt;).&lt;/p&gt;
&lt;h3&gt;3. Output Gate&lt;/h3&gt;
&lt;p&gt;The output gate passes [&lt;strong&gt;h&lt;sub&gt;t-1&lt;/sub&gt;&lt;/strong&gt; and &lt;strong&gt;X&lt;sub&gt;t&lt;/sub&gt;&lt;/strong&gt;] through a sigmoid function where it goes through a multiplication junction with the current state of the cell (&lt;strong&gt;C&lt;sub&gt;t&lt;/sub&gt;&lt;/strong&gt;) that just came out of a tanh function producing the hidden state of the cell.&lt;/p&gt;
&lt;p&gt;Watch the (pretty long) gif below to visualize what is going on!&lt;/p&gt;
&lt;p&gt;&lt;img alt="gif" src="images/lstm.gif"&gt;&lt;/p&gt;
&lt;h4&gt;In conclusion, LSTM netwroks are high powered RNNs that have a better 'memory'. LSTM networks also have application other than text generation such as: time series prediction, speech recognition, music composition, grammar learning, sign Language Translation.&lt;/h4&gt;</content><category term="misc"></category></entry><entry><title>Battle of the Stats: Sheldon Keefe vs Mike Babcock</title><link href="https://jordan-Milne.github.io/Blog/Sheldon%20Keefe%20vs%20Mike%20Babcock.html" rel="alternate"></link><published>2020-01-31T11:35:00-05:00</published><updated>2020-01-31T11:35:00-05:00</updated><author><name>Jordan Milne</name></author><id>tag:jordan-milne.github.io,2020-01-31:/Blog/Sheldon Keefe vs Mike Babcock.html</id><summary type="html">&lt;h2&gt;In Sheldon Keefe’s coaching first 20 games he had a league-best 15-4-1 record that equated to a 127-point pace for the season.&lt;/h2&gt;
&lt;p&gt;In this blog I use bayesian statistics and pymc3 to get answers about the Leafs performance under the two coaches.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.preprocessing …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;In Sheldon Keefe’s coaching first 20 games he had a league-best 15-4-1 record that equated to a 127-point pace for the season.&lt;/h2&gt;
&lt;p&gt;In this blog I use bayesian statistics and pymc3 to get answers about the Leafs performance under the two coaches.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.preprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;LabelEncoder&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;dt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;arviz&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;az&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;IPython.core.pylabtools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;figsize&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;scipy.stats&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;stats&lt;/span&gt;

&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;matplotlib&lt;/span&gt; &lt;span class="n"&gt;inline&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here I read in a csv I created from webscrapping Auston Matthews 'Time on Ice' and the Toronto Maple Leafs total goals per game.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;matthews.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seaborn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nrows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ncols&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sharex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sharey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suptitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Leafs Performance This Season&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;game&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;team_goals&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Team Goals&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;game&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;matthews_toi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;color&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Matthews TOI&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;upper left&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="png" src="images/output_4_0.png"&gt;&lt;/p&gt;
&lt;p&gt;We Know that this season Babcock was replaced by Keefe, but using Bayesian statistics we can determine if there was changes in the leafs performance and on what day/game the change starts.&lt;/p&gt;
&lt;p&gt;Both 'Team Goals' and 'Matthews TOI' can be fit with a &lt;strong&gt;Poisson(λ)&lt;/strong&gt; distribution. Assuming that during the season on day &lt;strong&gt;'tau'&lt;/strong&gt; the parameter &lt;strong&gt;λ&lt;/strong&gt; changes to a higher value, resulting in two λ parameters. This means that there will be a &lt;strong&gt;λ&lt;/strong&gt; for before day &lt;strong&gt;'tau'&lt;/strong&gt; and a &lt;strong&gt;λ&lt;/strong&gt; for after day &lt;strong&gt;'tau'&lt;/strong&gt; resulting in a switchpoint day/game. However, if there is no real difference in the Leafs/Matthews performance then the two &lt;strong&gt;λ&lt;/strong&gt; should be equal.&lt;/p&gt;
&lt;h3&gt;Auston Matthews Ice Time&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pymc3&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pm&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;lambda_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lambda_1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lambda_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Normal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lambda_2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tau&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DiscreteUniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tau&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;41&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Index&lt;/span&gt;
    &lt;span class="n"&gt;lambda_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tau&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lambda_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lambda_2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;observation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Poisson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;obs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lambda_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;observed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;matthews_toi&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;trace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tune&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;Multiprocess&lt;/span&gt; &lt;span class="nv"&gt;sampling&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;chains&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;jobs&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;CompoundStep&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;NUTS&lt;/span&gt;: [&lt;span class="nv"&gt;lambda_2&lt;/span&gt;, &lt;span class="nv"&gt;lambda_1&lt;/span&gt;]
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;Metropolis&lt;/span&gt;: [&lt;span class="nv"&gt;tau&lt;/span&gt;]
&lt;span class="nv"&gt;Sampling&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;chains&lt;/span&gt;, &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;divergences&lt;/span&gt;: &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%|&lt;/span&gt;██████████&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;22000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;22000&lt;/span&gt; [&lt;span class="mi"&gt;00&lt;/span&gt;:&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;:&lt;span class="mi"&gt;00&lt;/span&gt;, &lt;span class="mi"&gt;1890&lt;/span&gt;.&lt;span class="mi"&gt;00&lt;/span&gt;&lt;span class="nv"&gt;draws&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;]
&lt;span class="nv"&gt;The&lt;/span&gt; &lt;span class="nv"&gt;number&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;effective&lt;/span&gt; &lt;span class="nv"&gt;samples&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;smaller&lt;/span&gt; &lt;span class="nv"&gt;than&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;some&lt;/span&gt; &lt;span class="nv"&gt;parameters&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What we are looking for from PyMC3 is the difference in the two lamdas and what day/game (tau) the changes occured.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;sd&lt;/th&gt;
      &lt;th&gt;hpd_3%&lt;/th&gt;
      &lt;th&gt;hpd_97%&lt;/th&gt;
      &lt;th&gt;mcse_mean&lt;/th&gt;
      &lt;th&gt;mcse_sd&lt;/th&gt;
      &lt;th&gt;ess_mean&lt;/th&gt;
      &lt;th&gt;ess_sd&lt;/th&gt;
      &lt;th&gt;ess_bulk&lt;/th&gt;
      &lt;th&gt;ess_tail&lt;/th&gt;
      &lt;th&gt;r_hat&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;lambda_1&lt;/td&gt;
      &lt;td&gt;19.148&lt;/td&gt;
      &lt;td&gt;1.134&lt;/td&gt;
      &lt;td&gt;16.894&lt;/td&gt;
      &lt;td&gt;21.225&lt;/td&gt;
      &lt;td&gt;0.014&lt;/td&gt;
      &lt;td&gt;0.010&lt;/td&gt;
      &lt;td&gt;6666.0&lt;/td&gt;
      &lt;td&gt;6666.0&lt;/td&gt;
      &lt;td&gt;7745.0&lt;/td&gt;
      &lt;td&gt;5034.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lambda_2&lt;/td&gt;
      &lt;td&gt;20.535&lt;/td&gt;
      &lt;td&gt;1.191&lt;/td&gt;
      &lt;td&gt;18.476&lt;/td&gt;
      &lt;td&gt;22.925&lt;/td&gt;
      &lt;td&gt;0.018&lt;/td&gt;
      &lt;td&gt;0.013&lt;/td&gt;
      &lt;td&gt;4292.0&lt;/td&gt;
      &lt;td&gt;4171.0&lt;/td&gt;
      &lt;td&gt;4963.0&lt;/td&gt;
      &lt;td&gt;5521.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tau&lt;/td&gt;
      &lt;td&gt;24.154&lt;/td&gt;
      &lt;td&gt;11.620&lt;/td&gt;
      &lt;td&gt;7.000&lt;/td&gt;
      &lt;td&gt;41.000&lt;/td&gt;
      &lt;td&gt;0.281&lt;/td&gt;
      &lt;td&gt;0.199&lt;/td&gt;
      &lt;td&gt;1711.0&lt;/td&gt;
      &lt;td&gt;1711.0&lt;/td&gt;
      &lt;td&gt;1751.0&lt;/td&gt;
      &lt;td&gt;3205.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lambda_2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lambda_1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;81125&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The Toronto Maple Leafs played 23 games under Mike Babcock so there should be a change on the 24 game if Sheldon Keefe had a significant effect on the team's performance The posterior distributions of the two &lt;strong&gt;λs&lt;/strong&gt; are  distinc and mean for 'tau' is 24.15, meaning the model actually recocnized that a change ocurred on that game. In addition, by taking the differences between all the &lt;code&gt;lamda_2&lt;/code&gt; and &lt;code&gt;lamda_1&lt;/code&gt; values and getting the mean, the chance that the difference in performance is due to the change on that game can be calculated. This means there s a 81.1% chance the change in coaching is the reason for the increase in Auston Matthews ice time.&lt;/p&gt;
&lt;h3&gt;Toronto Maple Leafs Goals per Game&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pymc3&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pm&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;lambda_1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TruncatedNormal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lambda_1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;lambda_2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;TruncatedNormal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lambda_2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;tau&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DiscreteUniform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tau&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;14&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;upper&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;idx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;# Index&lt;/span&gt;
    &lt;span class="n"&gt;lambda_&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;switch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tau&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;idx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lambda_1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lambda_2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;observation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Poisson&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;obs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lambda_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;observed&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;team_goals&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;trace&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;tune&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;chains&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;Multiprocess&lt;/span&gt; &lt;span class="nv"&gt;sampling&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;chains&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;jobs&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;CompoundStep&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;NUTS&lt;/span&gt;: [&lt;span class="nv"&gt;lambda_2&lt;/span&gt;, &lt;span class="nv"&gt;lambda_1&lt;/span&gt;]
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="nv"&gt;Metropolis&lt;/span&gt;: [&lt;span class="nv"&gt;tau&lt;/span&gt;]
&lt;span class="nv"&gt;Sampling&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="nv"&gt;chains&lt;/span&gt;, &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;divergences&lt;/span&gt;: &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="o"&gt;%|&lt;/span&gt;██████████&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="mi"&gt;22000&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;22000&lt;/span&gt; [&lt;span class="mi"&gt;00&lt;/span&gt;:&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;00&lt;/span&gt;:&lt;span class="mi"&gt;00&lt;/span&gt;, &lt;span class="mi"&gt;1853&lt;/span&gt;.&lt;span class="mi"&gt;81&lt;/span&gt;&lt;span class="nv"&gt;draws&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;s&lt;/span&gt;]
&lt;span class="nv"&gt;The&lt;/span&gt; &lt;span class="nv"&gt;number&lt;/span&gt; &lt;span class="nv"&gt;of&lt;/span&gt; &lt;span class="nv"&gt;effective&lt;/span&gt; &lt;span class="nv"&gt;samples&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="nv"&gt;smaller&lt;/span&gt; &lt;span class="nv"&gt;than&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;some&lt;/span&gt; &lt;span class="nv"&gt;parameters&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pm&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;summary&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;mean&lt;/th&gt;
      &lt;th&gt;sd&lt;/th&gt;
      &lt;th&gt;hpd_3%&lt;/th&gt;
      &lt;th&gt;hpd_97%&lt;/th&gt;
      &lt;th&gt;mcse_mean&lt;/th&gt;
      &lt;th&gt;mcse_sd&lt;/th&gt;
      &lt;th&gt;ess_mean&lt;/th&gt;
      &lt;th&gt;ess_sd&lt;/th&gt;
      &lt;th&gt;ess_bulk&lt;/th&gt;
      &lt;th&gt;ess_tail&lt;/th&gt;
      &lt;th&gt;r_hat&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;lambda_1&lt;/td&gt;
      &lt;td&gt;3.326&lt;/td&gt;
      &lt;td&gt;0.415&lt;/td&gt;
      &lt;td&gt;2.568&lt;/td&gt;
      &lt;td&gt;4.116&lt;/td&gt;
      &lt;td&gt;0.005&lt;/td&gt;
      &lt;td&gt;0.004&lt;/td&gt;
      &lt;td&gt;6848.0&lt;/td&gt;
      &lt;td&gt;6335.0&lt;/td&gt;
      &lt;td&gt;7527.0&lt;/td&gt;
      &lt;td&gt;6197.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;lambda_2&lt;/td&gt;
      &lt;td&gt;3.963&lt;/td&gt;
      &lt;td&gt;0.456&lt;/td&gt;
      &lt;td&gt;3.156&lt;/td&gt;
      &lt;td&gt;4.838&lt;/td&gt;
      &lt;td&gt;0.006&lt;/td&gt;
      &lt;td&gt;0.004&lt;/td&gt;
      &lt;td&gt;5320.0&lt;/td&gt;
      &lt;td&gt;5320.0&lt;/td&gt;
      &lt;td&gt;5373.0&lt;/td&gt;
      &lt;td&gt;9373.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;tau&lt;/td&gt;
      &lt;td&gt;23.921&lt;/td&gt;
      &lt;td&gt;4.981&lt;/td&gt;
      &lt;td&gt;15.000&lt;/td&gt;
      &lt;td&gt;30.000&lt;/td&gt;
      &lt;td&gt;0.119&lt;/td&gt;
      &lt;td&gt;0.085&lt;/td&gt;
      &lt;td&gt;1749.0&lt;/td&gt;
      &lt;td&gt;1704.0&lt;/td&gt;
      &lt;td&gt;1631.0&lt;/td&gt;
      &lt;td&gt;3441.0&lt;/td&gt;
      &lt;td&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lambda_2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;lambda_1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mean&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;83355&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using the same proccess as before it can be seen that the 'tau' was found to  is basically 24. In addition, there is a 83.1% chance the change in coaching is the reason for the Maple Leafs scoring more goals.&lt;/p&gt;
&lt;p&gt;In conclusion, Keefe has made a significant impact in the leafs performance (enough for the model to find it) and I hope he keeps on this path!&lt;/p&gt;</content><category term="misc"></category></entry><entry><title>Modern Functional Programming: Coconut</title><link href="https://jordan-Milne.github.io/Blog/Functional%20Programming%20with%20Coconut.html" rel="alternate"></link><published>2020-01-25T11:35:00-05:00</published><updated>2020-01-25T11:35:00-05:00</updated><author><name>Jordan Milne</name></author><id>tag:jordan-milne.github.io,2020-01-25:/Blog/Functional Programming with Coconut.html</id><summary type="html">&lt;h2&gt;Coconut is a language that was built to be useful for functional programming and piggy-backs off of Python (valid Python code is valid Coconut code). Coconut provides modern functional programmuing tools that are easy to use and very powerful. Coconut does to functional programming what Python did to imperative programming …&lt;/h2&gt;</summary><content type="html">&lt;h2&gt;Coconut is a language that was built to be useful for functional programming and piggy-backs off of Python (valid Python code is valid Coconut code). Coconut provides modern functional programmuing tools that are easy to use and very powerful. Coconut does to functional programming what Python did to imperative programming&lt;/h2&gt;
&lt;p&gt;We will start simple and print 'hello world!' in Coconut using a pipeline. Coconut takes the string 'hello world!' and with the pipe &lt;code&gt;|&amp;gt;&lt;/code&gt; sends it to the &lt;code&gt;print&lt;/code&gt; function.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;hello, world!&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Coconut also allows for more elegant lamda functions. Instead of having to type 'lambda' and using the colon Coconut just uses an arrow, &lt;code&gt;-&amp;gt;&lt;/code&gt;, as shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Coconut&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="n"&gt;Python&lt;/span&gt;
&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;where&lt;/code&gt; keyword in Coconut is something that Python should adopt. The &lt;code&gt;where&lt;/code&gt; statement executes each assignment (&lt;code&gt;a = 1&lt;/code&gt;, &lt;code&gt;b = 2&lt;/code&gt;) then evaluates the base (&lt;code&gt;c = a + b&lt;/code&gt;).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="k"&gt;where&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; 
&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Another operator that is very interesting and can tie into a data science project workflow is the &lt;code&gt;pipeline&lt;/code&gt;. This allows objects to get passed from function to function in human readable code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;add&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;subtract&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;mult&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;div&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;n&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;add&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;subtract&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;mult&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Two powerfull key words in Coconut are &lt;code&gt;case&lt;/code&gt; and &lt;code&gt;match&lt;/code&gt; and they give python &lt;code&gt;if&lt;/code&gt; statements a run for their money. The function below takes a &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;tuple&lt;/code&gt; and classify the sequence of the given value. the &lt;code&gt;case&lt;/code&gt; block provides a value that the &lt;code&gt;match&lt;/code&gt; statment have to match in order to execute. Only one match statement inside of a case block can ever succeed, so more general matches should be put below more specific ones .&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;classify_sequence&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;value&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
    &lt;span class="nv"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;    
    &lt;span class="nv"&gt;case&lt;/span&gt; &lt;span class="nv"&gt;value&lt;/span&gt;:   
        &lt;span class="nv"&gt;match&lt;/span&gt; &lt;span class="ss"&gt;()&lt;/span&gt;:
            &lt;span class="nv"&gt;out&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;empty&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="nv"&gt;match&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;,&lt;span class="ss"&gt;)&lt;/span&gt;:
            &lt;span class="nv"&gt;out&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;singleton&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="nv"&gt;match&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;,&lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
            &lt;span class="nv"&gt;out&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;duplicate pair of &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nv"&gt;str&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
        &lt;span class="nv"&gt;match&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;_&lt;/span&gt;,&lt;span class="nv"&gt;_&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
            &lt;span class="nv"&gt;out&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;pair&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
        &lt;span class="nv"&gt;match&lt;/span&gt; &lt;span class="nv"&gt;_&lt;/span&gt; &lt;span class="nv"&gt;is&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;tuple&lt;/span&gt;, &lt;span class="nv"&gt;list&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
            &lt;span class="nv"&gt;out&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;sequence&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;:
        &lt;span class="nv"&gt;raise&lt;/span&gt; &lt;span class="nv"&gt;TypeError&lt;/span&gt;&lt;span class="ss"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;out&lt;/span&gt;

# &lt;span class="nv"&gt;Try&lt;/span&gt; &lt;span class="nv"&gt;it&lt;/span&gt; &lt;span class="nv"&gt;out&lt;/span&gt;
[] &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;classify_sequence&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;print&lt;/span&gt;
&lt;span class="ss"&gt;()&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;classify_sequence&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;print&lt;/span&gt;
[&lt;span class="mi"&gt;1&lt;/span&gt;] &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;classify_sequence&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;print&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;,&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;classify_sequence&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;print&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;,&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;classify_sequence&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;print&lt;/span&gt;
&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;,&lt;span class="mi"&gt;1&lt;/span&gt;,&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;classify_sequence&lt;/span&gt; &lt;span class="o"&gt;|&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;print&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;
&lt;span class="n"&gt;empty&lt;/span&gt;
&lt;span class="n"&gt;singleton&lt;/span&gt;
&lt;span class="n"&gt;duplicate&lt;/span&gt; &lt;span class="n"&gt;pair&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="n"&gt;pair&lt;/span&gt;
&lt;span class="n"&gt;sequence&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="misc"></category></entry><entry><title>The Underrated Beauty of the sklearn-pandas DataFrameMapper, FunctionTransformer, and CategoricalImputer</title><link href="https://jordan-Milne.github.io/Blog/The%20Underrated%20Beauty%20of%20the%20sklearn-pandas.html" rel="alternate"></link><published>2020-01-20T11:35:00-05:00</published><updated>2020-01-20T11:35:00-05:00</updated><author><name>Jordan Milne</name></author><id>tag:jordan-milne.github.io,2020-01-20:/Blog/The Underrated Beauty of the sklearn-pandas.html</id><summary type="html">&lt;h3&gt;In this blog I will show how to improve your preprocessing workflow using some tools from the powerfull sklearn-pandas package which can be seemlessly intergrated with tools from sklearn and pandas (hence the name).&lt;/h3&gt;
&lt;p&gt;First import our required libraries &lt;a href="https://github.com/scikit-learn-contrib/sklearn-pandas"&gt;sklearn-pandas&lt;/a&gt; and  Netlfix dataset from kaggle. Three examples will be used …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;In this blog I will show how to improve your preprocessing workflow using some tools from the powerfull sklearn-pandas package which can be seemlessly intergrated with tools from sklearn and pandas (hence the name).&lt;/h3&gt;
&lt;p&gt;First import our required libraries &lt;a href="https://github.com/scikit-learn-contrib/sklearn-pandas"&gt;sklearn-pandas&lt;/a&gt; and  Netlfix dataset from kaggle. Three examples will be used to show the interesting features from sklearn-pandas.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn_pandas&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;DataFrameMapper&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CategoricalImputer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;FunctionTransformer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.model_selection&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;train_test_split&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sklearn.preprocessing&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;StandardScaler&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LabelBinarizer&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;movies.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;title&lt;/th&gt;
      &lt;th&gt;country&lt;/th&gt;
      &lt;th&gt;release_year&lt;/th&gt;
      &lt;th&gt;rating&lt;/th&gt;
      &lt;th&gt;duration&lt;/th&gt;
      &lt;th&gt;listed_in&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;Rivaaz&lt;/td&gt;
      &lt;td&gt;India&lt;/td&gt;
      &lt;td&gt;2011&lt;/td&gt;
      &lt;td&gt;TV-PG&lt;/td&gt;
      &lt;td&gt;107 min&lt;/td&gt;
      &lt;td&gt;Dramas, Independent Movies, International Movies&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;American Experience: Ruby Ridge&lt;/td&gt;
      &lt;td&gt;United States&lt;/td&gt;
      &lt;td&gt;2017&lt;/td&gt;
      &lt;td&gt;TV-MA&lt;/td&gt;
      &lt;td&gt;53 min&lt;/td&gt;
      &lt;td&gt;Documentaries&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;Mumbai Matinee&lt;/td&gt;
      &lt;td&gt;India&lt;/td&gt;
      &lt;td&gt;2003&lt;/td&gt;
      &lt;td&gt;TV-MA&lt;/td&gt;
      &lt;td&gt;116 min&lt;/td&gt;
      &lt;td&gt;Comedies, International Movies, Romantic Movies&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;Maya Angelou: And Still I Rise&lt;/td&gt;
      &lt;td&gt;United States&lt;/td&gt;
      &lt;td&gt;2016&lt;/td&gt;
      &lt;td&gt;TV-PG&lt;/td&gt;
      &lt;td&gt;114 min&lt;/td&gt;
      &lt;td&gt;Documentaries&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;Famous in Ahmedabad&lt;/td&gt;
      &lt;td&gt;India&lt;/td&gt;
      &lt;td&gt;2015&lt;/td&gt;
      &lt;td&gt;NaN&lt;/td&gt;
      &lt;td&gt;29 min&lt;/td&gt;
      &lt;td&gt;Documentaries, International Movies&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;

&lt;h2&gt;DataFrameMapper&lt;/h2&gt;
&lt;p&gt;The DataFrameMapper is a tool for mapping pandas data frame columns using sklearn transformations. The mapper takes a list of tuples in which first tuple element is a column name from the pandas DataFrameand the second element is an object which will perform the transformation applied to that column, as shown below. Only columns in the mapper will be passed through, for example, &lt;code&gt;df&lt;/code&gt; above has a column &lt;code&gt;'country&lt;/code&gt; that I did not include in my mapper and it will not be in the output data frame. Another interesting feature is that you can apply multiple transformations onto a column as seen for the &lt;code&gt;'duration'&lt;/code&gt; column below.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mapper = DataFrameMapper([
    (['duration'], [FunctionTransformer(remove_words), StandardScaler()]),
    ('title', LabelBinarizer()),
    ('rating', [CategoricalImputer(), LabelBinarizer()]),
], df_out=True)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;An important note is that shape of an array matters for some transformers (StandardScaler). Adding square brackets &lt;code&gt;[]&lt;/code&gt;, changes the array from 1 dimensional to a 2-dimensional array with one column, i.e. a column vector.&lt;/p&gt;
&lt;h3&gt;FunctionTransformer&lt;/h3&gt;
&lt;p&gt;Now making custom functions is extremely important but takes some practice. Let's start by making a line of code that will remove the ' min' part from the duration column, then we will put it in a function. 
1. &lt;code&gt;df['duration'].str.split(' ')&lt;/code&gt; will give an output like &lt;code&gt;[90, min]&lt;/code&gt; for each column
2. &lt;code&gt;df['duration'].str.split(' ').str[0]&lt;/code&gt; will just give the &lt;code&gt;90&lt;/code&gt; for each column... however it it is &lt;code&gt;dtype: object&lt;/code&gt;
3. Finally &lt;code&gt;df['duration'].str.split(' ').str[0].astype(float)&lt;/code&gt; gives us &lt;code&gt;90.0&lt;/code&gt; for each column which is exactly what we want&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;remove_words&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;astype&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So now we have a function that takes a column and can remove the ' min' part. Unfortunately, when we plug this into the FunctionTransformer in the DataFrameMapper it gives an error upon transformation. The following steps will outline how to get the function into an acceptable state:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;If the function is passed as is - &lt;code&gt;df[column].str.split(' ').str[0].astype(float)&lt;/code&gt; the error will be &lt;code&gt;'KeyError: 'duration: 75 min'&lt;/code&gt;. This is because the transformer works with numpy arrays instead of series or DataFrames&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Removing df and the now unnecessary &lt;code&gt;.str&lt;/code&gt;s and turning it to an array gives us an end product that looks like - &lt;code&gt;np.array(column.split(' ')[0]).astype(float)&lt;/code&gt; which can be successfully passed through the FunctionTransformer&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;CategoricalImputer&lt;/h3&gt;
&lt;p&gt;Another powerfull tool from sklearn-pandas is the &lt;code&gt;CategoricalImputer&lt;/code&gt;. Unfortunately, the scikit-learn Imputer transformer only works with numbers. However, the sklearn-pandas &lt;code&gt;CategoricalImputer&lt;/code&gt; works with strings, substituting null values with the most frequent or specified values.&lt;/p&gt;
&lt;h2&gt;Putting it All Together&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Train-Test Split&lt;/span&gt;
&lt;span class="n"&gt;target&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;listed_in&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;target&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_train&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y_test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;train_test_split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;random_state&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;42&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Make the mapper&lt;/span&gt;
&lt;span class="n"&gt;mapper&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;DataFrameMapper&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;
    &lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;duration&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;FunctionTransformer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;remove_words&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;StandardScaler&lt;/span&gt;&lt;span class="p"&gt;()]),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;title&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;LabelBinarizer&lt;/span&gt;&lt;span class="p"&gt;()),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rating&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CategoricalImputer&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;LabelBinarizer&lt;/span&gt;&lt;span class="p"&gt;()]),&lt;/span&gt;
&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;df_out&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Fit and transform the mapper&lt;/span&gt;
&lt;span class="n"&gt;Z_train&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fit_transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_train&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Z_test&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mapper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;transform&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;X_test&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# What the output looks like&lt;/span&gt;
&lt;span class="n"&gt;Z_train&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;duration&lt;/th&gt;
      &lt;th&gt;title_Maya Angelou: And Still I Rise&lt;/th&gt;
      &lt;th&gt;title_Mumbai Matinee&lt;/th&gt;
      &lt;th&gt;title_Rivaaz&lt;/th&gt;
      &lt;th&gt;rating&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;0.950255&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;-1.382189&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;0.431934&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;</content><category term="misc"></category></entry><entry><title>Python Fireworks</title><link href="https://jordan-Milne.github.io/Blog/blog2.html" rel="alternate"></link><published>2019-12-30T11:35:00-05:00</published><updated>2019-12-30T11:35:00-05:00</updated><author><name>Jordan Milne</name></author><id>tag:jordan-milne.github.io,2019-12-30:/Blog/blog2.html</id><summary type="html">&lt;h3&gt;How to Make Fireworks in Python&lt;/h3&gt;
&lt;p&gt;I used Turtle, from the python standard library to make art that resembles fireworks. I created a series of multiple concentric circles with random initial and final radius as well as random widths for each circle.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.stack.imgur.com%2FSzOrn.png&amp;amp;f=1&amp;amp;nofb=1"&gt;&lt;/p&gt;
&lt;p&gt;first step was to import turtle which is …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;How to Make Fireworks in Python&lt;/h3&gt;
&lt;p&gt;I used Turtle, from the python standard library to make art that resembles fireworks. I created a series of multiple concentric circles with random initial and final radius as well as random widths for each circle.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://external-content.duckduckgo.com/iu/?u=https%3A%2F%2Fi.stack.imgur.com%2FSzOrn.png&amp;amp;f=1&amp;amp;nofb=1"&gt;&lt;/p&gt;
&lt;p&gt;first step was to import turtle which is basically a on screen pen that you can program. After that I imported &lt;code&gt;randint&lt;/code&gt; and &lt;code&gt;numpy&lt;/code&gt; as I wanted the circles to be different from eachother like fireworks. &lt;/p&gt;
&lt;p&gt;The function &lt;code&gt;circles&lt;/code&gt; creates multiple of concetric circles that will pop in a random position on the screen as seen  using &lt;code&gt;circle_position&lt;/code&gt;. Then a  colour for the circles is randomly selected from the set list colours. In the &lt;code&gt;for loop&lt;/code&gt; the first circle diameter, last circle diameter and number of circles in between is randomly determined. The rest of the loop are turtle commands that draw a circle.&lt;/p&gt;
&lt;p&gt;The next function &lt;code&gt;make_circles&lt;/code&gt; simply loops the &lt;code&gt;circle&lt;/code&gt; function to make a series of multiple concentric circles that look like fireworks.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;turtle&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;
&lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;speed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#turns off draw mode so circles pop up instantly&lt;/span&gt;
&lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bgcolor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;black&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#background black&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;circles&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;circle_position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;400&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;  &lt;span class="c1"&gt;#&lt;/span&gt;
    &lt;span class="n"&gt;colours&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Deep Sky Blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Chartreuse&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Deep Pink&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Aquamarine&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Yellow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;white&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;purple&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;grey&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;circle_colour&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;colours&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;200&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
        &lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pencolor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;circle_colour&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;penup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;#pen up&lt;/span&gt;
        &lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setpos&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;circle_position&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#setting random starting position&lt;/span&gt;
        &lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# Face South&lt;/span&gt;
        &lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# Move one radius&lt;/span&gt;
        &lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;270&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;# Back to start heading&lt;/span&gt;
        &lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pendown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;    &lt;span class="c1"&gt;# Put the pen back down&lt;/span&gt;
        &lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;circle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    &lt;span class="c1"&gt;# Draw a circle&lt;/span&gt;
        &lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;penup&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;      &lt;span class="c1"&gt;# Pen up while we go home&lt;/span&gt;
        &lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;       &lt;span class="c1"&gt;# Head back to the start pos&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;make_circles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;circles&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;make_circles&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;turtle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exitonclick&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="youtube youtube-4x3"&gt;
&lt;iframe width="800" height="500" src="https://www.youtube.com/embed/8MoQGbHboKs" seamless frameBorder="0"&gt;&lt;/iframe&gt;
&lt;/div&gt;</content><category term="misc"></category></entry><entry><title>Unpacking the Subplot</title><link href="https://jordan-Milne.github.io/Blog/blog1.html" rel="alternate"></link><published>2019-12-08T03:35:00-05:00</published><updated>2019-12-08T03:35:00-05:00</updated><author><name>Jordan Milne</name></author><id>tag:jordan-milne.github.io,2019-12-08:/Blog/blog1.html</id><summary type="html">&lt;h1&gt;&lt;strong&gt;Having Troubles with Subplots?"&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;matplotlib might not be the quickest/easiest way to spin up visuals in python but it is extremely customizable. A powerful tool for plotting when using matplotlib is subplots. Subplots allow you to have multiple plots on one figure, but setting up these plots can get …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;&lt;strong&gt;Having Troubles with Subplots?"&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;matplotlib might not be the quickest/easiest way to spin up visuals in python but it is extremely customizable. A powerful tool for plotting when using matplotlib is subplots. Subplots allow you to have multiple plots on one figure, but setting up these plots can get confusing. This blog post will outline how to correctly add key features to your subplot.&lt;/p&gt;
&lt;p&gt;The first step is to import the necessary packages and data sets&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;plt&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;drug-use-by-age.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;df2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;diamonds.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Let's start with a plot that has 2 rows and 3 columns. The first parameters in &lt;code&gt;.subplot()&lt;/code&gt;  is &lt;strong&gt;rows&lt;/strong&gt; and the second parameter is &lt;strong&gt;columns&lt;/strong&gt;. Figure size can also be adjusted in &lt;code&gt;.subplot()&lt;/code&gt;. Creating a title for all the plots or a &lt;em&gt;super&lt;/em&gt; title as matplotlib would call it, as well as adjusting the area of the subplots can be down as shown below.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suptitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;How to Arrange Subplots&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots_adjust&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bottom&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;wspace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hspace&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="png" src="images/output_3_0.png"&gt;&lt;/p&gt;
&lt;p&gt;Now that there are some empty plots, we can fill them with data. In the first line of code below we create the subplot and have an axes label of "ax" but it can be anything (like "axs" or "axes") as long as you are consistent when you call on it later. To access a certain plot in the subplot we can locate it by using ax[row,column]. So to fill the middle top plot with data, &lt;code&gt;ax[0,1]&lt;/code&gt; is used so the plot knows we are targeting that subplot. Setting a title for a specific sublot is a little different than normal matplotlib plotting, again you start with identifying which sublot you want to give a title to with &lt;code&gt;ax[0,0]&lt;/code&gt; and then add &lt;code&gt;set_title()&lt;/code&gt; as seen below&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nrows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ncols&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sharex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sharey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;carat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;df2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Axis [0,0]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#instead of plt use ax(x)&lt;/span&gt;

&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="png" src="images/output_5_0.png"&gt;&lt;/p&gt;
&lt;p&gt;For 1D subplots only one parameter is needed in &lt;code&gt;ax[]&lt;/code&gt; as shown below. In the subplots below it is shown how do change the visual details of the sublot&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;c&lt;/code&gt; changes the colour of the data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;alpha&lt;/code&gt; changes the opacity of the data&lt;/li&gt;
&lt;li&gt;&lt;code&gt;marker&lt;/code&gt; changes the shape of each data point&lt;/li&gt;
&lt;li&gt;&lt;code&gt;linestyle&lt;/code&gt; well... changes the line style of the data&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nrows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ncols&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sharex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sharey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;scatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;carat&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;df2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;price&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;alpha&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mf"&gt;0.01&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Axis [0]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_title&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Axis [1]&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;marker&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;linestyle&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;dashed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suptitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Two Plots&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="png" src="images/output_7_0.png"&gt;&lt;/p&gt;
&lt;p&gt;To give the sublots some flavour, use &lt;code&gt;plt.style.use('seaborn')&lt;/code&gt; which gives the sublots a background and a grid. In the figure below the x axis is the same for both sublots so in &lt;code&gt;plt.sublots()&lt;/code&gt;, &lt;code&gt;sharex&lt;/code&gt; can be set to &lt;code&gt;True&lt;/code&gt;. In addition, by adding &lt;code&gt;label&lt;/code&gt; to the subplot a legend can then be made by adding &lt;code&gt;ax[X].legend()&lt;/code&gt; (with X being the indicated subplot row or column as shown below)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;style&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;use&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;seaborn&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ax&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subplots&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nrows&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ncols&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sharex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sharey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;figsize&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suptitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Sharing x per column, y per row&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;alcohol-use&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Alcohol&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;age&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;marijuana-use&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;orange&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Marijuana&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;ax&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;legend&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;fig&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;suptitle&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Drug Usage&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;plt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="png" src="images/output_9_0.png"&gt;&lt;/p&gt;</content><category term="misc"></category></entry></feed>